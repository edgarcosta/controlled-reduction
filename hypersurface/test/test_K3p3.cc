// Copyright 2013-2017 Edgar Costa
// See LICENSE file for license details.
//
// tests that the Frob  function  the same under a change of variables

#include "hypersurface.h"
#include "timing.h"
#include "tools.h"
#include <time.h>
#include <cstdlib>

#include <sstream>

using namespace std;
using namespace NTL;
#define NTL_RANGE_CHECK
int main()
{
    timestamp_pair pair;
    timestamp_mark(pair);
    SetSeed(to_ZZ(time(NULL)));
    srand(time(0));
    cout<<"test_K3p3...";
    fflush(stdout);

    int64_t p, precision, n , d;
    p = 3;
    n = 3;
    d = 4;
    precision = 16;
    Vec<int64_t> N;
    N.SetLength(n);
    N[0] = 7;
    N[1] = 7;
    N[2] = 8;
    Vec<int64_t> absolute_precision;
    std::stringstream buffer;
    buffer << "[24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 5 5]";
    buffer >> absolute_precision;

    //cout <<"p = " << p << " n = "<<n<<" d = "<<d<<" N = "<< N<<endl;

    zz_p::init(p);
    ZZ_p::init( power_ZZ(p,precision) );

    Vec<zz_p> f_vector;

    buffer << "[1 2 1 1 1 1 0 0 0 0 1 0 2 1 1 2 0 2 0 1 1 2 1 0 1 1 0 0 2 1 1 1 2 1 1]";
    buffer >> f_vector;

    Mat<ZZ_p> Frob_expected;
    buffer << "[\n\
[10215 6624 7554 17295 7875 1593 12858 15978 2622 5871 13809 3984 9399 10227 11580 9282 12636 11850 6147 11967 44]\n\
[58095 6957 18228 12594 9645 12654 3384 12999 6537 14559 3024 16077 5619 16572 8292 17121 12768 12564 5829 19641 185]\n\
[15552 7215 17370 6423 17787 18504 5037 6195 19650 11571 17901 15345 8697 5400 12201 2877 14061 18036 16749 17844 35]\n\
[54414 13917 17208 18579 7869 6405 5412 13218 3726 6840 8313 7386 6459 3813 17388 6981 10683 13032 17214 5355 214]\n\
[41787 3303 78 13122 624 12747 17568 1281 8916 8310 2757 8358 17742 14706 9279 2949 8235 13311 5934 14256 239]\n\
[24444 3570 2655 2367 4992 16287 8616 7407 14859 5715 4281 3978 7233 6570 6540 16824 13932 1563 13659 2946 45]\n\
[49302 10542 14751 1347 12015 6771 17400 18261 16146 19581 2859 18339 18177 11601 3927 13242 12051 4239 8385 18414 234]\n\
[9648 11049 2571 8361 3495 14376 8046 810 8358 8280 6987 7023 14277 2523 15213 12963 9741 4881 11517 8559 155]\n\
[28089 15495 4641 12603 15195 825 13152 16491 9990 3054 804 9669 7107 6021 16329 18546 441 5133 7608 11220 162]\n\
[7893 6495 16809 8700 14274 16692 1986 10428 13644 12627 12009 2109 12477 12786 774 630 5214 5580 13773 234 172]\n\
[9567 6621 4437 15072 17280 18117 18693 7677 7872 4404 3516 6450 18492 13296 16590 303 7680 7146 18465 3972 73]\n\
[17802 10017 12378 11583 15456 2391 17976 18708 3093 1155 9654 840 18633 651 5427 8883 15255 19146 13788 18360 95]\n\
[43344 14373 2241 2088 10842 17094 2994 7509 3672 9825 1347 1530 210 11649 708 8196 8754 12129 19059 3075 108]\n\
[27027 9765 1533 2892 7920 13410 249 13026 14793 16470 5082 7506 15777 1275 15753 12897 942 9105 12141 18774 14]\n\
[20880 9357 6114 8178 16512 8022 13020 18504 15444 4686 864 10053 16065 14970 4161 2112 12003 7557 12423 3519 186]\n\
[38808 1806 2007 7152 19404 9396 19680 3507 8313 7812 3492 19524 18513 19656 12426 516 1392 19629 6903 7038 203]\n\
[48744 10767 2346 5475 11238 2925 17094 2814 8199 13668 5676 1944 10635 5658 18849 16494 8925 762 18906 6204 139]\n\
[58635 16446 12198 5631 2634 14733 12570 18123 19566 14118 627 15444 14238 3876 18531 16767 489 13569 12828 15807 216]\n\
[45216 5004 246 1128 12777 165 1002 17247 10083 15834 4356 5211 2640 5454 15282 13725 16200 11274 4953 11076 222]\n\
[27648 12465 3402 5103 2421 2166 18045 10344 5721 15195 3321 14016 16260 7794 5133 2112 11634 1269 10149 13593 241]\n\
[24462 17739 16317 7599 14409 18978 8706 9093 4884 2295 5892 8178 12396 8613 4899 4467 2118 12123 4179 12078 152]\n\
]";

    buffer >> Frob_expected;
    Frob_expected = transpose(Frob_expected);

    hypersurface hs(p, precision, n, d, f_vector, false);
    Vec<ZZ_p> frob0 = hs.frob_J(0, N[0]);
    int64_t i = (rand() % 19) + 1;
    Vec<ZZ_p> frob1 = hs.frob_J(i, N[1]);
    Vec<ZZ_p> frob2 = hs.frob_J(20, N[2]);

    if( frob0 != Frob_expected[0] or frob1 != Frob_expected[i] or frob2 != Frob_expected[20] )
    {
        cout << "\n\tFAIL test_K3p3" <<endl;
        cout << "\ti = " << i << endl;
        cout << "\tfrob0 = " << frob0 << endl;
        cout << "\tfrob1 = " << frob0 << endl;
        cout << "\tfrob2 = " << frob0 << endl;

        cout << "\texpected:" << endl;
        cout << "\tfrob0 = " << Frob_expected[0] << endl;
        cout << "\tfrob0 = " << Frob_expected[i] << endl;
        cout << "\tfrob0 = " << Frob_expected[20] << endl;
        abort();
    }
    cout << "PASS ";
    timestamp_report(pair);
    cout << endl;
    return 0; 
}
